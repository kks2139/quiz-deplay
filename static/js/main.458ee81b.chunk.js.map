{"version":3,"sources":["components/QuizList.tsx","utils/util.ts","components/QuizCard.tsx","components/Timer.tsx","components/ToastBox.tsx","components/AlertBox.tsx","components/ChartBox.tsx","components/NoteList.tsx","components/Note.tsx","components/ConfirmMessage.tsx","components/QuizHistoryList.tsx","components/QuizHistoryCard.tsx","components/Popup.tsx","components/ToolTip.tsx","redux-modules/quizList.ts","redux-modules/app.ts","containers/QuizListContainer.tsx","containers/ChartBoxContainer.tsx","containers/NoteListContainer.tsx","containers/ConfirmMessageContainer.tsx","containers/ToastBoxContainer.tsx","containers/QuizHistoryListContainer.tsx","pages/MainPage.tsx","pages/StartPage.tsx","pages/NotFound.tsx","pages/ResultPage.tsx","pages/WrongAnswerNotePage.tsx","redux-modules/quizHistoryList.ts","pages/HistoryPage.tsx","App.tsx","reportWebVitals.ts","redux-modules/index.ts","index.tsx"],"names":["style","css","QuizList","quizList","onSelected","onFinished","onNext","useState","quizIndex","setQuizIndex","length","quiz","quizNumber","size","onClickNext","last","idx","onFactorSelected","factor","UT","request","api","a","fetch","result","status","Error","json","console","error","rand","n","Math","floor","random","localeStringToTime","str","nums","split","join","map","Number","Date","getTime","QuizCard","question","correct_answer","incorrect_answers","selected","correct","factors","info","setInfo","onClickFact","e","fact","currentTarget","dataset","classList","add","answer","pick","useEffect","list","slice","splice","className","i","onClick","Timer","startTimer","getCurrentTime","time","setTime","timerId","useRef","initTime","toString","current","window","setInterval","currTime","diff","min","getMinutes","sec","getSeconds","mil","getMilliseconds","setText","clearInterval","color","type","ToastBox","msg","onVanish","toastRef","setTimeout","visibility","ref","AlertBox","ChartBox","dataList","colorList","showLabel","colorScale","data","innerRadius","labelRadius","startAngle","endAngle","labels","fontSize","fontWeight","fill","backgroundColor","name","NoteList","resultList","onSave","onOpinionChanged","res","resultFactor","index","Note","opinion","value","onChange","ConfirmMessage","onClickButton","QuizHistoryList","historyList","onClickCard","h","resultDate","resultTime","category","QuizHistoryCard","minSec","t","Popup","width","height","onClose","children","ToolTip","text","SET_QUIZ_LIST","ADD_RESULT","RESET_RESULT","SET_RESULT_TIME","SET_RESULT_DATE","UPDATE_OPINION","initState","resultInfo","app","state","action","payload","concat","SHOW_CONFIRM","SHOW_TOAST","showConfirm","arg","showToast","confirmInfo","show","confirmCallback","undefined","toastInfo","QuizListContainer","onQuizFinished","onLastSelected","dispatch","useDispatch","useSelector","isLast","ChartBoxContainer","corrects","reduce","acc","now","incorrects","x","y","NoteListContainer","quizState","saveResultList","key","sessionStorage","setItem","JSON","stringify","log","newList","ConfirmMessageContainer","ToastBoxContainer","QuizHistoryListContainer","quizHistoryList","sort","b","MainPage","history","useHistory","start","readyTime","timeStr","setResultDate","toLocaleString","push","StartPage","getQuizList","results","NotFound","goBack","ResultPage","resDate","difficulty","WrongAnswerNotePage","SET_HISTORY_LIST","HistoryPage","hisInfo","popInfo","setPopInfo","getQuizHistoryList","hisList","Object","keys","forEach","indexOf","getItem","parse","App","pathname","location","replace","process","path","exact","render","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","store","createStore","ReactDOM","StrictMode","basename","document","getElementById"],"mappings":"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","file":"static/js/main.458ee81b.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n/** @jsxImportSource @emotion/react */\r\nimport {css} from '@emotion/react';\r\nimport {quiz} from '../utils/interfaces';\r\nimport {QuizCard} from './index';\r\nimport {selectedFactor} from '../utils/interfaces';\r\n\r\ninterface Props {\r\n    quizList: quiz[]\r\n    onSelected: (arg1: selectedFactor, arg2: boolean)=>void;\r\n    onFinished: ()=>void;\r\n    onNext: ()=>void;\r\n}\r\n\r\nfunction QuizList({quizList, onSelected, onFinished, onNext}: Props){\r\n    const [quizIndex, setQuizIndex] = useState(0);\r\n\r\n    const onClickNext = ()=>{\r\n        const last = quizIndex === quizList.length - 1;\r\n        setQuizIndex(idx => last ? idx : idx + 1);\r\n        onNext();\r\n        if(last) onFinished();\r\n    }\r\n    \r\n    const onFactorSelected = (factor: selectedFactor)=>{\r\n        const last = quizIndex === quizList.length - 1;\r\n        onSelected(factor, last);\r\n    }\r\n\r\n    return (\r\n        <div css={style}>\r\n            {quizList.length > 0 ?\r\n                <QuizCard \r\n                    key={quizIndex}\r\n                    quiz={quizList[quizIndex]} \r\n                    quizNumber={quizIndex} \r\n                    size={quizList.length}\r\n                    onClickNext={onClickNext}\r\n                    onFactorSelected={onFactorSelected}/>\r\n                : null\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nconst style = css`\r\n    width: 750px;\r\n    min-height: 500px;\r\n    padding: 20px 30px;\r\n    background-color: var(--color-light-black);\r\n    box-shadow: var(--shadow-2);\r\n\r\n    @media screen and (max-width: 800px) {\r\n        width: calc(100vw - 100px);\r\n        min-height: 500px;\r\n    }\r\n`;\r\n\r\nexport default QuizList;","const UT = {\r\n    request : async (api: string)=>{\r\n        try {\r\n            const result = await fetch(api);\r\n            if(result.status !== 200){\r\n                throw new Error('문제가 발생하였습니다.');\r\n            }\r\n            return result.json();\r\n        }catch(ex){\r\n            console.error(ex);\r\n        }\r\n    },\r\n    rand : (n: number) => { // 0 이상 ~ n 미만 랜덤숫자 리턴\r\n        return Math.floor(Math.random() * 10) % n;\r\n    },\r\n    localeStringToTime : (str: string)=>{\r\n        const arr = str.split('.').join('').split(':').join(' ').split(' ');\r\n        const nums = arr.map(a => {\r\n            if(a === '오전') return -1;\r\n            else if(a === '오후') return 1;\r\n            else return Number(a);\r\n        });\r\n        return new Date(\r\n            nums[0], \r\n            nums[1] - 1, \r\n            nums[2], \r\n            nums[3] > 0 ? nums[4] + 12 : nums[4], \r\n            nums[5], \r\n            nums[6]\r\n        ).getTime();\r\n    }\r\n}\r\n\r\nexport default UT;","import React, { useState, useEffect } from 'react';\r\n/** @jsxImportSource @emotion/react */\r\nimport {css} from '@emotion/react';\r\nimport {quiz} from '../utils/interfaces';\r\nimport UT from '../utils/util';\r\nimport {selectedFactor} from '../utils/interfaces';\r\n\r\ninterface state {\r\n    selected: boolean\r\n    correct: boolean\r\n    factors: string[]\r\n}\r\n\r\ninterface Props {\r\n    quiz: quiz\r\n    quizNumber: number\r\n    size: number\r\n    onClickNext: ()=>void\r\n    onFactorSelected: (args1: selectedFactor)=>void\r\n}\r\n\r\nfunction QuizCard({quiz, quizNumber, size, onClickNext, onFactorSelected}: Props){\r\n    const {question, correct_answer, incorrect_answers} = quiz;\r\n    const [info, setInfo] = useState<state>({\r\n        selected: false,\r\n        correct: false,\r\n        factors: []\r\n    });\r\n\r\n    const onClickFact = (e: React.MouseEvent<HTMLDivElement>)=>{\r\n        const fact = e.currentTarget.dataset.fact!\r\n        const correct = fact === correct_answer;\r\n\r\n        if(!info.selected){\r\n            e.currentTarget.classList.add('selected');\r\n            onFactorSelected({\r\n                question,\r\n                answer: correct_answer,\r\n                pick: fact,\r\n                correct\r\n            });\r\n            setInfo({\r\n                selected: true,\r\n                correct,\r\n                factors: info.factors\r\n            });\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n        const list = incorrect_answers.slice();\r\n        list.splice(UT.rand(3), 0, correct_answer);\r\n        setInfo({\r\n            ...info,\r\n            factors: list\r\n        });\r\n    }, [quiz]);\r\n\r\n    return (\r\n        <div css={style}>\r\n            <div className='header'>\r\n                <div className='num'>{`문제 ${quizNumber + 1}.`}</div>\r\n                <div className='question'>{question}</div>\r\n            </div>\r\n            <section>\r\n                <div className='factors'>\r\n                    {info.factors.map((fact, i) => (\r\n                        <div key={fact} className='fact' onClick={onClickFact} data-fact={fact}>\r\n                            <div className='txt'>\r\n                                <span data-testid='f1'>{`${i+1}.`}</span>\r\n                                <div>{fact}</div>\r\n                            </div>\r\n                            <div className='line'></div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                {info.selected ? \r\n                    <div className='button' onClick={onClickNext}>{size === quizNumber + 1 ? '결과 확인!' : '다음 문항'}</div> \r\n                    : null\r\n                }\r\n            </section>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst style = css`\r\n    width: 100%;\r\n    height: 100%;\r\n    font-weight: bold;\r\n    color: white;\r\n    .header {\r\n        background-color: var(--color-dark-navy);\r\n        padding: 20px 0 3px 20px;\r\n        box-shadow: var(--shadow-1);\r\n    }\r\n    .num {\r\n        font-size: 23px;\r\n    }\r\n    .question {\r\n        width: calc(100% - 60px);\r\n        min-height: 80px;\r\n        font-size: 18px;\r\n        line-height: 35px;\r\n        margin: 15px 0;\r\n    }\r\n    section {\r\n        height: calc(100% - 160px);\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: space-between;\r\n        margin-top: 10px;\r\n        .button {\r\n            margin: 0 auto;\r\n            width: 220px;\r\n            text-align: center;\r\n            margin-top: 10px;\r\n        }\r\n    }\r\n    .factors {\r\n        margin-left: 10px;\r\n        .txt {\r\n            display: flex;\r\n            span {\r\n                margin-right: 15px;\r\n                font-size: 20px;\r\n            }\r\n        }\r\n        .fact {\r\n            width: fit-content;\r\n            transition: .2s;\r\n            line-height: 40px;\r\n            padding: 0 10px;\r\n            margin-bottom: 15px;\r\n            &:hover {\r\n                cursor: pointer;\r\n                .line {\r\n                    width: 100% !important;\r\n                    height: 2px;\r\n                }\r\n            }\r\n            .line {\r\n                width: 0px;\r\n                height: 2px;\r\n                background-color: var(--color-orange);\r\n                transition: .3s;\r\n            }\r\n        }\r\n        .selected {\r\n            color: var(--color-orange);\r\n            .line {\r\n                width: 100%;\r\n            }\r\n        }\r\n    }\r\n\r\n    @media screen and (max-width: 800px) {\r\n        .header {\r\n            .question {\r\n                height: unset;\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport default QuizCard;","import React, { useEffect, useState, useRef } from 'react';\r\n/** @jsxImportSource @emotion/react */\r\nimport {css} from '@emotion/react';\r\nimport {MdTimelapse} from 'react-icons/md';\r\n\r\ninterface Props {\r\n    startTimer: boolean\r\n    getCurrentTime: (arg: string)=>void\r\n}\r\n\r\nfunction Timer({startTimer, getCurrentTime}: Props){\r\n    const [time, setTime] = useState('00:00.0');\r\n    const timerId = useRef(0);\r\n    const initTime = new Date().getTime();\r\n\r\n    const setText = ()=>{\r\n        const currTime = new Date().getTime();\r\n        const diff = new Date(currTime - initTime);\r\n\r\n        const min = toString(diff.getMinutes());\r\n        const sec = toString(diff.getSeconds());\r\n        const mil = Math.floor(diff.getMilliseconds()/100);\r\n\r\n        setTime(`${min}:${sec}.${mil}`);\r\n    }\r\n\r\n    const toString = (n: number)=> n < 10 ? '0' + n : '' + n;\r\n\r\n    useEffect(()=>{\r\n        if(startTimer) timerId.current = window.setInterval(()=> setText(), 100);\r\n        if(!startTimer) getCurrentTime(time);\r\n        return ()=>{clearInterval(timerId.current!)}\r\n    }, [startTimer]);\r\n\r\n    return (\r\n        <div css={style}>\r\n            <MdTimelapse size='32' color='rgb(0, 140, 255)'/>{time}\r\n        </div>\r\n    );\r\n}\r\n\r\nconst style = css`\r\n    font-size: 40px;\r\n    color: white;\r\n    transform: scaleY(1.1);\r\n    > svg {\r\n        margin-right: 20px;\r\n        animation-name: rotate;\r\n        animation-duration: 2.5s;\r\n        animation-timing-function: ease;\r\n        animation-iteration-count: infinite;\r\n    }\r\n    @keyframes rotate {\r\n        from {transform: rotate(0deg);}\r\n        to {transform: rotate(360deg);}\r\n    }\r\n`;\r\n\r\nexport default Timer;","import React, { useEffect, useRef } from 'react';\r\n/** @jsxImportSource @emotion/react */\r\nimport {css} from '@emotion/react';\r\nimport {ImCross, ImCheckmark} from 'react-icons/im';\r\n\r\ninterface Props {\r\n    msg?: string\r\n    type?: 'o' | 'x'\r\n    onVanish: ()=>void\r\n}\r\n\r\nfunction ToastBox({msg='', type, onVanish}: Props){\r\n    const toastRef = useRef<HTMLDivElement>(null);\r\n    useEffect(()=>{\r\n        if(!type) setTimeout(()=> {\r\n            toastRef.current!.style.visibility = 'hidden';\r\n            onVanish();\r\n        }, 2900);\r\n    }, []);\r\n\r\n    return (\r\n        <div css={style(type)} ref={toastRef}>\r\n            {type === 'o' ? \r\n                <div className='txt'>\r\n                    <ImCheckmark size='35' color='rgb(0 174 0)'/>{msg}\r\n                </div> :\r\n                type === 'x' ?\r\n                <div className='txt'>\r\n                    <ImCross size='35' color='red'/>{msg}\r\n                </div> :\r\n                <div className='txt'>\r\n                    {msg}\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nconst style = (type: string | undefined)=> {\r\nreturn css`\r\n    z-index: 100;\r\n    position: fixed;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    display: flex;\r\n    align-items: center;\r\n    width: 310px;\r\n    height: 100px;\r\n    background-color: white;\r\n    text-align: center;\r\n    color: black;\r\n    border-radius: var(--radius-2);\r\n    // border-top: 6px solid var(--color-light-green);\r\n    box-shadow: var(--shadow-2);\r\n    .txt {\r\n        width: 100%;\r\n        font-weight: bold;\r\n        font-size: 30px;       \r\n        svg {\r\n            margin-right: 15px;\r\n        }\r\n    }\r\n    animation-name: ${type ? 'appear' : 'vanish'};\r\n    animation-duration: ${type ? '1s' : '3s'};\r\n    animation-timing-function: ease;\r\n`;}\r\n\r\nexport default ToastBox;","import React from 'react';\r\n/** @jsxImportSource @emotion/react */\r\nimport {css} from '@emotion/react';\r\n\r\ninterface Props {\r\n    msg: string\r\n}\r\n\r\nfunction AlertBox({msg}: Props){\r\n    return (\r\n        <div css={style}>\r\n            <div className='txt'>\r\n                {msg}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst style = css`\r\n    position: fixed;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    display: flex;\r\n    align-items: center;\r\n    width: 310px;\r\n    height: 100px;\r\n    background-color: white;\r\n    text-align: center;\r\n    color: black;\r\n    border-radius: var(--radius-2);\r\n    // border-top: 6px solid var(--color-light-green);\r\n    box-shadow: var(--shadow-2);\r\n    .txt {\r\n        width: 100%;\r\n        font-weight: bold;\r\n        font-size: 35px;       \r\n        svg {\r\n            margin-right: 15px;\r\n        }\r\n    }\r\n`;\r\n\r\nexport default AlertBox;","import React from 'react';\r\n/** @jsxImportSource @emotion/react */\r\nimport {css} from '@emotion/react';\r\nimport {VictoryPie} from 'victory';\r\n\r\ninterface dataListType {\r\n    x: string\r\n    y: number\r\n    name: string\r\n}\r\n\r\ninterface Props {\r\n    dataList: dataListType[]\r\n    colorList: string[]\r\n    showLabel?: boolean\r\n}\r\n\r\nfunction ChartBox({dataList, colorList, showLabel=true}: Props){\r\n    return (\r\n        <div css={style}>\r\n            <VictoryPie \r\n                colorScale={colorList}\r\n                data={dataList}\r\n                innerRadius={70}\r\n                labelRadius={({ innerRadius }) => 100 }\r\n                startAngle={180}\r\n                endAngle={360 + 180}\r\n                style={{\r\n                    labels: {\r\n                        fontSize: 35,\r\n                        fontWeight: 'bold',\r\n                        fill: 'white'\r\n                    }\r\n                }}/>\r\n            {showLabel ? <div className='info'>\r\n                {dataList.map((data, i) => (\r\n                    <div key={i} className='wrapper'>\r\n                        <div className='color' style={{backgroundColor: colorList[i]}}></div>\r\n                        <div className='name'>{data.name}</div>\r\n                    </div>\r\n                ))}\r\n            </div> : null}\r\n        </div>\r\n    );\r\n}\r\n\r\nconst style = css`\r\n    > .info {\r\n        display: flex;\r\n        justify-content: center;\r\n        margin-bottom: 30px;\r\n        > .wrapper {\r\n            color: white;\r\n            font-weight: bold;\r\n            display: flex;\r\n            align-items: center;\r\n            margin-right: 20px;\r\n            .name {\r\n            }\r\n            .color {\r\n                margin-right: 10px;\r\n                width: 16px;\r\n                height: 16px;\r\n                border-radius: var(--radius-2);\r\n            }\r\n        }\r\n    }\r\n\r\n    @media screen and (max-width: 800px) {\r\n        display: flex;\r\n        > .info {\r\n            flex-direction: column;\r\n            > .wrapper {\r\n                min-width: 100px;\r\n                height: 35px;\r\n            }\r\n        }\r\n\r\n    }\r\n`;\r\n\r\nexport default ChartBox;","import React from 'react';\r\n/** @jsxImportSource @emotion/react */\r\nimport {css} from '@emotion/react';\r\nimport {selectedFactor} from '../utils/interfaces';\r\nimport {Note} from './index';\r\n\r\ninterface Props {\r\n    resultList: selectedFactor[]\r\n    onSave: ()=>void\r\n    onOpinionChanged: (arg1: string, arg2: number)=>void\r\n}\r\n\r\nfunction NoteList({resultList, onSave, onOpinionChanged}: Props){\r\n    const onClickSave = ()=> {\r\n        onSave();\r\n    }\r\n    return (\r\n        <div css={style}>\r\n            <div className='header'>\r\n                <div className='button' onClick={onClickSave}>저장</div>\r\n            </div>\r\n            <div className='note-wrapper'>\r\n                {resultList.map((res, i) => (\r\n                    <Note key={res.question} resultFactor={res} index={i} onOpinionChanged={onOpinionChanged}></Note>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst style = css`\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    > .header {\r\n        display: flex;\r\n        justify-content: flex-end;\r\n        align-items: center;\r\n        height: 50px;\r\n        margin-bottom: 10px;\r\n    }\r\n    > .note-wrapper {\r\n        overflow: auto;\r\n        flex-grow: 1;\r\n    }\r\n`;\r\n\r\nexport default NoteList;","import React from 'react';\r\n/** @jsxImportSource @emotion/react */\r\nimport {css} from '@emotion/react';\r\nimport {selectedFactor} from '../utils/interfaces';\r\nimport {ImCross, ImCheckmark} from 'react-icons/im';\r\n\r\ninterface Props {\r\n    resultFactor: selectedFactor\r\n    index: number\r\n    onOpinionChanged: (arg1: string, arg2: number)=>void\r\n}\r\n\r\nfunction Note({resultFactor, index, onOpinionChanged}: Props){\r\n    const {question, answer, pick, correct, opinion} = resultFactor;\r\n\r\n    const onChange = (e: React.ChangeEvent<HTMLTextAreaElement>)=>{\r\n        onOpinionChanged(e.currentTarget.value, index);\r\n    }\r\n\r\n    return (\r\n        <div css={style}>\r\n            <div className='idx'>\r\n                {`문제 ${index + 1}.`}\r\n                {correct ? <ImCheckmark color='var(--color-green)'/> : <ImCross color='var(--color-red)'/>}\r\n            </div>\r\n            <section>\r\n                <div className='row'>\r\n                    <div className='txt'>문제</div>\r\n                    <div className='val'>{question}</div>\r\n                </div>\r\n                <div className='row'>\r\n                    <div className='txt'>답</div>\r\n                    <div className='val'>{answer}</div>\r\n                </div>\r\n                <div className='row'>\r\n                    <div className='txt'>나의 답</div>\r\n                    <div className='val'>{pick}</div>\r\n                </div>\r\n                <div className='row'>\r\n                    <div className='txt'>기록할 내용</div>\r\n                    <div className='ta'>\r\n                        <textarea value={opinion} onChange={onChange}></textarea>\r\n                    </div>\r\n\r\n                </div>\r\n            </section>        \r\n        </div>\r\n    );\r\n}\r\n\r\nconst style = css`\r\n    position: relative;\r\n    margin-bottom: 50px;\r\n    padding: 0 20px;\r\n    .idx {\r\n        display: flex;\r\n        align-items: center;\r\n        font-size: 18px;\r\n        font-weight: bold;\r\n        margin: 0 0 10px 15px;\r\n        svg {\r\n            margin-left: 15px;\r\n            transform: scale(1.1);\r\n        }\r\n    }\r\n    section {\r\n        box-shadow: 0 2px 20px -5px black;\r\n        font-weight: bold;\r\n        .row {\r\n            display: flex;\r\n            min-height: 60px;\r\n            > div {\r\n                display: flex;\r\n                align-items: center;\r\n                padding-left: 20px;\r\n            }\r\n            .txt {\r\n                width: 140px;\r\n                background-color: var(--color-dark-navy);\r\n            }\r\n            .val {\r\n                flex-grow: 1;\r\n                background-color: var(--color-light-black);\r\n                padding-right: 5px;\r\n                width: calc(100% - 150px);\r\n            }\r\n            .ta {\r\n                flex-grow: 1;\r\n                width: calc(100% - 150px);\r\n                background-color: var(--color-light-black);\r\n            }\r\n            textarea {\r\n                height: 40px;\r\n                width: calc(100% - 30px);\r\n                resize: none;\r\n                border-radius: var(--radius-2);\r\n                background-color: var(--color-dark-gray);\r\n                color: white;\r\n                font-weight: bold;\r\n            }\r\n        }\r\n    }\r\n    animation-name: showUp;\r\n    animation-duration: 1s;\r\n    animation-timing-function: ease;\r\n`;\r\n\r\nexport default Note;","import React from 'react';\r\n/** @jsxImportSource @emotion/react */\r\nimport {css} from '@emotion/react';\r\n\r\ninterface Props {\r\n    onClickButton: (arg: React.MouseEvent<HTMLDivElement>)=>void\r\n    msg?: string\r\n}\r\n\r\nfunction ConfirmMessage({onClickButton, msg}: Props){\r\n    const onClick = (e: React.MouseEvent<HTMLDivElement>)=> {\r\n        onClickButton(e);\r\n    }\r\n\r\n    return (\r\n        <div css={style}>\r\n            <div className='msg-box'>\r\n                <div className='txt'>\r\n                    {msg}\r\n                </div>\r\n                <div className='btn-wrapper'>\r\n                    <div className='btn' data-type='Y' onClick={onClick}>예</div>\r\n                    <div className='btn' data-type='N' onClick={onClick}>아니오</div>\r\n                </div>\r\n            </div>\r\n            <div className='modal'></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst style = css`\r\n    > .msg-box {\r\n        z-index: 100;\r\n        position: fixed;\r\n        top: 50%;\r\n        left: 50%;\r\n        transform: translate(-50%, -50%);\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: space-between;\r\n        width: 340px;\r\n        height: 140px;\r\n        background-color: white;\r\n        color: black;\r\n        border-radius: var(--radius-2);\r\n        // border-top: 6px solid var(--color-orange);\r\n        box-shadow: 0 20px 20px -10px black;\r\n        .txt {\r\n            display: flex;\r\n            justify-content: center;\r\n            width: calc(100% - 20px);\r\n            height: 30px;\r\n            align-items: center;\r\n            flex-grow: 1;\r\n            font-weight: bold;\r\n            font-size: 18px;       \r\n            svg {\r\n                margin-right: 15px;\r\n            }\r\n        }\r\n        .btn-wrapper {\r\n            display: flex;\r\n            .btn {\r\n                display: flex;\r\n                justify-content: center;\r\n                align-items: center;\r\n                text-align: center;\r\n                font-size: 20px;\r\n                font-weight: bold;\r\n                height: 40px;\r\n                background-color: var(--color-light-gray);\r\n                cursor: pointer;\r\n                transition: .2s;\r\n            }\r\n            .btn:first-child {\r\n                flex-grow: 1;\r\n                border-bottom-left-radius: var(--radius-2);\r\n                &:hover {\r\n                    color: white;\r\n                    background-color: var(--color-blue);\r\n                }\r\n            }\r\n            .btn:last-child {\r\n                flex-grow: 1;\r\n                border-bottom-right-radius: var(--radius-2);\r\n                &:hover {\r\n                    color: white;\r\n                    background-color: var(--color-red);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n`;\r\n\r\nexport default ConfirmMessage;","import React from 'react';\r\n/** @jsxImportSource @emotion/react */\r\nimport {css} from '@emotion/react';\r\nimport {historyInfo} from '../utils/interfaces';\r\nimport {QuizHistoryCard} from '../components/index';\r\n\r\ninterface Props {\r\n    historyList: historyInfo[]\r\n    onClickCard?: (arg: historyInfo)=>void\r\n}\r\n\r\nfunction QuizHistoryList({historyList, onClickCard}: Props){\r\n    return (\r\n        <div css={style}>\r\n            {historyList.map(h => (\r\n                <QuizHistoryCard \r\n                    key={h.resultDate}\r\n                    resultList={h.resultList}\r\n                    resultDate={h.resultDate} \r\n                    resultTime={h.resultTime}\r\n                    category={h.category}\r\n                    onClickCard={onClickCard}/>\r\n            ))}\r\n            {historyList.length === 0 ? (\r\n                <div className='empty'>\r\n                    <div className='txt'>아직 저장된 퀴즈 결과가 없어요.</div>\r\n                </div>\r\n            ) : null}\r\n        </div>\r\n    );\r\n}\r\n\r\nconst style = css`\r\n    height: 100%;\r\n    padding: 15px;\r\n    > .empty {\r\n        font-size: 20px;\r\n        text-align: center;\r\n        margin-top: 50px;\r\n        > .txt {\r\n            height: 50px;\r\n        }\r\n    }\r\n`;\r\n\r\nexport default QuizHistoryList;","import React from 'react';\r\n/** @jsxImportSource @emotion/react */\r\nimport {css} from '@emotion/react';\r\nimport {selectedFactor, historyInfo} from '../utils/interfaces';\r\nimport {ChartBoxContainer} from  '../containers/index';\r\n\r\ninterface Props {\r\n    resultList: selectedFactor[]\r\n    resultDate: string\r\n    resultTime: string\r\n    category: string\r\n    onClickCard?: (arg: historyInfo)=>void\r\n}\r\n\r\nfunction QuizHistoryCard({resultList, resultDate, resultTime, category, onClickCard}: Props){\r\n    const minSec = resultTime.split(':').map(t => Number(t));\r\n\r\n    const onClick = ()=>{\r\n        if(onClickCard) {\r\n            onClickCard({\r\n                resultList,\r\n                resultDate,\r\n                resultTime,\r\n                category\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div css={style} onClick={onClick}>\r\n            <div className='info'>\r\n                <div className='date'>{resultDate}</div> \r\n                <div className='cate'>{category}</div>\r\n                <div className='time'>{`${minSec[0]}분 ${minSec[1]}초`}</div>\r\n            </div>\r\n           <div className='chart'>\r\n               <ChartBoxContainer list={resultList} showLabel={false}></ChartBoxContainer>\r\n           </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst style = css`\r\n    display: flex;\r\n    font-size: 21px;\r\n    margin-bottom: 20px;\r\n    cursor: pointer;\r\n    box-shadow: var(--shadow-1);\r\n    transition: .2s;\r\n    .info {\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: space-evenly;\r\n        background-color: var(--color-dark-navy);\r\n        width: 400px;\r\n        > div {\r\n            padding-left: 15px;\r\n            margin-left: 20px;\r\n            border-left: 3px solid var(--color-blue);\r\n        }\r\n    }\r\n    > .chart {\r\n        width: 140px;\r\n        background-color: var(--color-light-black);\r\n    }\r\n    &:hover {\r\n        box-shadow: 0 0 0 2px var(--color-dark-blue);\r\n    }\r\n\r\n    @media screen and (max-width: 800px){\r\n        > .info {\r\n            font-size: 19px;\r\n            width: 300px;\r\n        }\r\n    }\r\n`;\r\n\r\nexport default QuizHistoryCard;","import React from \"react\";\r\n/** @jsxImportSource @emotion/react */\r\nimport {css} from '@emotion/react';\r\nimport {IoIosCloseCircleOutline} from 'react-icons/io';\r\n\r\ninterface Props {\r\n    width?: string\r\n    height?: string\r\n    onClose: ()=>void\r\n    children: JSX.Element\r\n}\r\n\r\nfunction Popup({width='50%', height='50%', onClose, children}: Props){\r\n    return (\r\n        <>\r\n            <div css={style} style={{width, height}}>\r\n                <div className='header'>\r\n                    {/* <VscClose size='50' color='white' onClick={()=>{onClose()}}/> */}\r\n                    <IoIosCloseCircleOutline size='50' color='white' onClick={()=>{onClose()}}/>\r\n                </div>\r\n                <div className='content'>\r\n                    {children}\r\n                </div>\r\n            </div>\r\n            <div className='modal'></div>\r\n        </>\r\n    );\r\n}\r\n\r\nconst style = css`\r\n    position: fixed;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    background-color: rgb(57 57 57);\r\n    padding: 0 20px 20px 20px;\r\n    border-radius: var(--radius-2);\r\n    box-shadow: 0 0 20px -5px black;\r\n    z-index: 11;\r\n    > .header {\r\n        height: 50px;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        svg {\r\n            cursor: pointer;\r\n            margin-top: 10px;\r\n        }\r\n    }\r\n    > .content {\r\n        height: calc(100% - 50px);\r\n    }\r\n\r\n    @media screen and (max-width: 800px){\r\n        width: calc(100% - 100px) !important;\r\n    }\r\n`;\r\n\r\nexport default Popup;","import React from 'react';\r\n/** @jsxImportSource @emotion/react */\r\nimport {css} from '@emotion/react';\r\n\r\ninterface Props {\r\n    text: string\r\n    children: JSX.Element\r\n}\r\n\r\nfunction ToolTip({text, children}: Props){\r\n    return (\r\n        <div css={style}>\r\n            {children}\r\n            <div className='tooltip-text pos'>\r\n                {text}\r\n            </div>\r\n            <div className='triangle pos'></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst style = css`\r\n    position: relative;\r\n    .tooltip-text {\r\n        z-index: 1;\r\n        position: absolute;\r\n        top: 0;\r\n        left: 50%;\r\n        transform: translate(-50%, calc(-100% - 14px));\r\n        display: none;\r\n        width: fit-content;\r\n        font-size: 12px;\r\n        color: white;\r\n        padding: 3px 10px;\r\n        background-color: var(--color-blue);\r\n        border-radius: var(--radius-2);\r\n    }\r\n    .triangle {\r\n        z-index: 2;\r\n        position: absolute;\r\n        top: 0;\r\n        left: 50%;\r\n        transform: translate(-50px, calc(-50% - 14px)) rotate(45deg);\r\n        display: none;\r\n        width: 7px;\r\n        height: 7px;\r\n        background-color: var(--color-blue);\r\n    }\r\n    &:hover {\r\n        .tooltip-text, .triangle {\r\n            display: unset;\r\n        }\r\n    }\r\n`;\r\n\r\nexport default ToolTip;","import {quiz, selectedFactor, resultInfo} from '../utils/interfaces';\r\n\r\nconst SET_QUIZ_LIST = 'quizList/SET_QUIZ_LIST' as const;\r\nconst ADD_RESULT = 'quizList/ADD_RESULT' as const;\r\nconst RESET_RESULT = 'quizList/RESET_RESULT' as const;\r\nconst SET_RESULT_TIME = 'quizList/SET_RESULT_TIME' as const;\r\nconst SET_RESULT_DATE = 'quizList/SET_RESULT_DATE' as const;\r\nconst UPDATE_OPINION = 'quizList/UPDATE_OPINION' as const;\r\n\r\nexport const setQuizList = (arg: quiz[])=> ({ \r\n    type : SET_QUIZ_LIST,\r\n    payload : arg\r\n});\r\nexport const addResult = (arg: selectedFactor)=> ({ \r\n    type : ADD_RESULT,\r\n    payload : arg\r\n});\r\nexport const resetResult = ()=> ({ \r\n    type : RESET_RESULT,\r\n    payload : null\r\n});\r\nexport const setResultTime = (arg: string)=> ({ \r\n    type : SET_RESULT_TIME,\r\n    payload : arg\r\n});\r\nexport const setResultDate = (arg: string)=> ({ \r\n    type : SET_RESULT_DATE,\r\n    payload : arg\r\n});\r\nexport const updateOpinion = (arg: selectedFactor[])=> ({ \r\n    type : UPDATE_OPINION,\r\n    payload : arg\r\n});\r\n\r\ntype actionType = \r\n    | ReturnType<typeof setQuizList>\r\n    | ReturnType<typeof addResult>\r\n    | ReturnType<typeof resetResult>\r\n    | ReturnType<typeof setResultTime>\r\n    | ReturnType<typeof setResultDate>\r\n    | ReturnType<typeof updateOpinion>\r\n\r\ntype stateType = {\r\n    quizList: quiz[]\r\n    resultInfo: resultInfo\r\n}\r\n\r\nconst initState: stateType = {\r\n    quizList : [],\r\n    resultInfo : {\r\n        resultList : [],\r\n        resultTime : '00:00.0',\r\n        resultDate : ''\r\n    }\r\n};\r\n\r\nfunction app(state: stateType = initState, action: actionType) {\r\n    switch (action.type) {\r\n        case SET_QUIZ_LIST:\r\n            return {\r\n                ...state,\r\n                quizList : action.payload.slice()\r\n            };\r\n        case ADD_RESULT:\r\n            return {\r\n                ...state,\r\n                resultInfo : {\r\n                    ...state.resultInfo,\r\n                    resultList : state.resultInfo.resultList.concat({...action.payload})\r\n                }\r\n            };\r\n        case RESET_RESULT:\r\n            return {\r\n                ...state,\r\n                resultInfo : {\r\n                    resultTime : '00:00.0',\r\n                    resultList : [],\r\n                    resultDate : ''\r\n                }\r\n            };\r\n        case SET_RESULT_TIME:\r\n            return {\r\n                ...state,\r\n                resultInfo : {\r\n                    ...state.resultInfo,\r\n                    resultTime : action.payload,\r\n                }\r\n            };\r\n        case SET_RESULT_DATE:\r\n            return {\r\n                ...state,\r\n                resultInfo : {\r\n                    ...state.resultInfo,\r\n                    resultDate : action.payload,\r\n                }\r\n            };\r\n        case UPDATE_OPINION:\r\n            return {\r\n                ...state,\r\n                resultInfo : {\r\n                    ...state.resultInfo,\r\n                    resultList : action.payload,\r\n                }\r\n            };\r\n        default:\r\n            return state;\r\n  }\r\n}\r\n\r\nexport default app;","import {confirmInfo, toastInfo} from '../utils/interfaces';\r\n\r\nconst SHOW_CONFIRM = 'app/SHOW_CONFIRM' as const;\r\nconst SHOW_TOAST = 'app/SHOW_TOAST' as const;\r\n\r\nexport const showConfirm = (arg: confirmInfo)=> ({ \r\n    type : SHOW_CONFIRM,\r\n    payload : arg\r\n});\r\nexport const showToast = (arg: toastInfo)=> ({ \r\n    type : SHOW_TOAST,\r\n    payload : arg\r\n});\r\n\r\ntype actionType = \r\n    | ReturnType<typeof showConfirm>\r\n    | ReturnType<typeof showToast>\r\n\r\ntype stateType = {\r\n    confirmInfo: confirmInfo\r\n    toastInfo: toastInfo\r\n}\r\n\r\nconst initState: stateType = {\r\n    confirmInfo: {\r\n        msg: '',\r\n        show: false,\r\n        confirmCallback: undefined\r\n    },\r\n    toastInfo : {\r\n        msg: '',\r\n        show: false,\r\n        type: undefined\r\n    }\r\n};\r\n\r\nfunction app(state: stateType = initState, action: actionType) {\r\n    switch (action.type) {\r\n        case SHOW_CONFIRM:\r\n            return {\r\n                ...state,\r\n                confirmInfo : {\r\n                    msg: action.payload.msg || '',\r\n                    show: action.payload.show,\r\n                    confirmCallback: action.payload.show ? action.payload.confirmCallback : undefined\r\n                }\r\n            };\r\n        case SHOW_TOAST:\r\n            return {\r\n                ...state,\r\n                toastInfo : {\r\n                    msg: action.payload.msg || '',\r\n                    show: action.payload.show,\r\n                    type: action.payload.show ? action.payload.type : undefined\r\n                }\r\n            };\r\n        default:\r\n            return state;\r\n  }\r\n}\r\n\r\nexport default app;","import React, {useEffect} from 'react';\r\nimport {QuizList} from '../components/index';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport { RootState } from '../redux-modules/index';\r\nimport {selectedFactor} from '../utils/interfaces';\r\nimport {addResult, resetResult} from '../redux-modules/quizList';\r\nimport {showToast} from '../redux-modules/app';\r\n\r\ninterface Props {\r\n    onQuizFinished: ()=>void\r\n    onLastSelected: ()=>void\r\n}\r\n\r\nfunction QuizListContainer({onQuizFinished, onLastSelected}: Props){\r\n    const dispatch = useDispatch();\r\n    const {quizList} = useSelector((state: RootState) => state.quizList);\r\n\r\n    \r\n    const onSelected = (factor: selectedFactor, isLast: boolean)=>{\r\n        dispatch(showToast({\r\n            msg: factor.correct ? '정답!' : '오답..',\r\n            show: true,\r\n            type: factor.correct ? 'o' : 'x'\r\n        }));\r\n        dispatch(addResult(factor));\r\n        if(isLast) onLastSelected();\r\n    }\r\n    \r\n    const onNext = ()=>{\r\n        dispatch(showToast({show: false}));\r\n    }\r\n\r\n    const onFinished = ()=>{\r\n        onQuizFinished();\r\n    }\r\n\r\n    useEffect(()=> {\r\n        dispatch(resetResult());\r\n        return ()=> { \r\n            dispatch(showToast({show: false}));\r\n         }\r\n    }, []);\r\n\r\n    return (\r\n        <QuizList quizList={quizList} onSelected={onSelected} onFinished={onFinished} onNext={onNext}></QuizList>\r\n    );\r\n}\r\n\r\nexport default QuizListContainer;","import React from 'react';\r\nimport {ChartBox} from '../components/index';\r\nimport {useSelector} from 'react-redux';\r\nimport { RootState } from '../redux-modules/index';\r\nimport {selectedFactor} from '../utils/interfaces';\r\n\r\ninterface Props {\r\n    list?: selectedFactor[]\r\n    showLabel?: boolean\r\n}\r\n\r\nfunction ChartBoxContainer({list, showLabel}: Props){\r\n    let {resultList} = useSelector((state: RootState) => state.quizList.resultInfo);\r\n    resultList = list ? list : resultList; \r\n    const corrects = resultList.reduce((acc, now)=> now.correct ? acc + 1 : acc, 0);\r\n    const incorrects = resultList.length - corrects;\r\n    const dataList = [\r\n        {x: '' + corrects, y: corrects, name: '정답'},\r\n        {x: '' + incorrects, y: incorrects, name: '오답'},\r\n    ];\r\n    const colorList = ['#008cff', '#ff3e3e'];\r\n\r\n    return (\r\n        <ChartBox dataList={dataList} colorList={colorList} showLabel={showLabel}></ChartBox>\r\n    );\r\n}\r\n\r\nexport default ChartBoxContainer;","import React from 'react';\r\nimport {NoteList} from '../components/index';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport { RootState } from '../redux-modules/index';\r\nimport {showConfirm, showToast} from '../redux-modules/app';\r\nimport {updateOpinion} from '../redux-modules/quizList';\r\nimport {historyInfo} from '../utils/interfaces';\r\n\r\ninterface Props {\r\n    info?: historyInfo\r\n}\r\n\r\nfunction NoteListContainer({info}: Props){\r\n    const quizState = useSelector((state: RootState) => state.quizList);\r\n    const {resultList, resultTime, resultDate} = info ? info : quizState.resultInfo;\r\n    const category = info ? info.category : quizState.quizList.length > 0 ? quizState.quizList[0].category : '';\r\n    const dispatch = useDispatch();\r\n    \r\n    const onSave = ()=>{\r\n        dispatch(showConfirm({\r\n            msg: info ? '내용을 수정할까요?' : '결과를 저장할까요?',\r\n            show: true,\r\n            confirmCallback: saveResultList\r\n        }));\r\n    }\r\n\r\n    const onOpinionChanged = (opinion: string, index: number)=>{\r\n        console.log(resultList);\r\n        const newList = resultList.map((res, i) => {\r\n            res.opinion = i === index ? opinion : res.opinion;\r\n            return res;\r\n        });\r\n        dispatch(updateOpinion(newList));\r\n    }\r\n\r\n    const saveResultList = ()=>{\r\n        // sessionStorage를 실제 DB 라고 가정\r\n        const key = 'quiz-' + resultDate.split(' ').join('-');\r\n        const value = {\r\n            resultList,\r\n            resultTime,\r\n            resultDate,\r\n            category\r\n        };\r\n        sessionStorage.setItem(key, JSON.stringify(value));\r\n        dispatch(showToast({\r\n            msg: '저장 되었습니다!',\r\n            show: true\r\n        }));\r\n    }\r\n\r\n    return (\r\n        <NoteList resultList={resultList} onSave={onSave} onOpinionChanged={onOpinionChanged}></NoteList>\r\n    );\r\n}\r\n\r\nexport default NoteListContainer;","import React from 'react';\r\nimport {ConfirmMessage} from '../components/index';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport { RootState } from '../redux-modules/index';\r\nimport {showConfirm} from '../redux-modules/app';\r\n\r\nfunction ConfirmMessageContainer(){\r\n    const dispatch = useDispatch();\r\n    const {msg, confirmCallback} = useSelector((state: RootState)=> state.app.confirmInfo);\r\n\r\n    const onClickButton = (e: React.MouseEvent<HTMLDivElement>)=> {\r\n        const {type} = e.currentTarget.dataset;\r\n        if(type === 'Y'){\r\n            if(confirmCallback) confirmCallback();\r\n        }\r\n        dispatch(showConfirm({show: false}));\r\n    }\r\n\r\n    return (\r\n        <ConfirmMessage onClickButton={onClickButton} msg={msg}></ConfirmMessage>\r\n    );\r\n}\r\n\r\nexport default ConfirmMessageContainer;","import React from 'react';\r\nimport {ToastBox} from '../components/index';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport { RootState } from '../redux-modules/index';\r\nimport {showToast} from '../redux-modules/app';\r\n\r\nfunction ToastBoxContainer(){\r\n    const dispatch = useDispatch();\r\n    const {msg, type} = useSelector((state: RootState)=> state.app.toastInfo);\r\n\r\n    const onVanish = ()=>{\r\n        dispatch(showToast({\r\n            show: false\r\n        }))\r\n    }\r\n\r\n    return (\r\n        <ToastBox msg={msg} type={type} onVanish={onVanish}></ToastBox>\r\n    );\r\n}\r\n\r\nexport default ToastBoxContainer;","import React from 'react';\r\nimport {QuizHistoryList} from '../components/index';\r\nimport {useSelector} from 'react-redux';\r\nimport { RootState } from '../redux-modules/index';\r\nimport {historyInfo} from '../utils/interfaces';\r\nimport UT from '../utils/util';\r\n\r\ninterface Props {\r\n    onClickCard?: (arg: historyInfo)=>void\r\n}\r\n\r\nfunction QuizHistoryListContainer({onClickCard}: Props){\r\n    const {historyList} = useSelector((state: RootState) => state.quizHistoryList);\r\n    historyList.sort((a: historyInfo, b: historyInfo)=>{\r\n        return UT.localeStringToTime(b.resultDate) - UT.localeStringToTime(a.resultDate);\r\n    });\r\n\r\n    return (\r\n        <QuizHistoryList historyList={historyList} onClickCard={onClickCard}></QuizHistoryList>\r\n    );\r\n}\r\n\r\nexport default QuizHistoryListContainer;","import React, {useEffect, useState, useRef} from 'react';\r\n/** @jsxImportSource @emotion/react */\r\nimport {css} from '@emotion/react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport {QuizListContainer} from '../containers/index';\r\nimport {useDispatch} from 'react-redux';\r\nimport {Timer, AlertBox} from '../components/index';\r\nimport {setResultTime, setResultDate} from '../redux-modules/quizList';\r\n\r\nfunction MainPage(){\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    const timerId = useRef(0);\r\n    const [info, setInfo] = useState({\r\n        start : false,\r\n        startTimer : false,\r\n        readyTime : 3\r\n    });\r\n\r\n    const onClickToStart = ()=>{\r\n        history.push('/');\r\n    }\r\n\r\n    const onQuizFinished = ()=>{\r\n        history.push('/result');\r\n    }\r\n    \r\n    const onLastSelected = ()=>{\r\n        setInfo({\r\n            ...info,\r\n            startTimer : false\r\n        });\r\n    }\r\n    \r\n    const getCurrentTime = (timeStr: string)=>{\r\n        dispatch(setResultTime(timeStr));\r\n        dispatch(setResultDate(new Date().toLocaleString()));\r\n    }\r\n\r\n    const countDown = ()=>{\r\n        timerId.current = window.setInterval(()=> {\r\n            setInfo((state)=>{\r\n                if(state.readyTime < 0) clearInterval(timerId.current);\r\n                return {\r\n                    startTimer : state.readyTime < 1,\r\n                    start : state.readyTime < 1,\r\n                    readyTime : state.readyTime - 1\r\n                }\r\n            });\r\n        }, 1000);\r\n    }\r\n\r\n    useEffect(()=>{\r\n        countDown();\r\n        return ()=>{clearInterval(timerId.current)}\r\n    }, []);\r\n\r\n    return (\r\n        <div css={style}>\r\n            {info.start ? \r\n                <div className='quiz-wrapper'>\r\n                    <div className='header'>\r\n                        <Timer startTimer={info.startTimer} getCurrentTime={getCurrentTime}></Timer>       \r\n                        <div className='button' onClick={onClickToStart}>처음으로</div>\r\n                    </div>\r\n                    <QuizListContainer onQuizFinished={onQuizFinished} onLastSelected={onLastSelected}></QuizListContainer>\r\n                </div>\r\n                : <AlertBox msg={`${info.readyTime}초 후 시작!`}></AlertBox>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nconst style = css`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    min-height: 100vh;\r\n    .quiz-wrapper {\r\n        > .header {\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: space-between;\r\n            height: 70px;\r\n            width: 100%;\r\n            transition: .3s;\r\n        }\r\n    }\r\n\r\n    @media screen and (max-width: 800px) {\r\n        .quiz-wrapper {\r\n            > .header {\r\n                flex-direction: column;\r\n                align-items: flex-start;\r\n                height: 100px;\r\n                transform: translateY(-20px);\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport default MainPage;","import React, {useEffect} from 'react';\r\n/** @jsxImportSource @emotion/react */\r\nimport {css} from '@emotion/react';\r\nimport UT from '../utils/util'; \r\nimport {IoMdArrowRoundDown} from 'react-icons/io';\r\nimport {useDispatch} from 'react-redux';\r\nimport {useHistory} from 'react-router-dom';\r\nimport {setQuizList} from '../redux-modules/quizList';\r\nimport {ToolTip} from '../components/index';\r\n\r\n\r\nfunction StartPage(){\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n\r\n    const getQuizList = async ()=>{\r\n        const result = await UT.request('mock.json');\r\n        dispatch(setQuizList(result[UT.rand(5)].results));\r\n    }\r\n\r\n    useEffect(()=>{\r\n        getQuizList();\r\n    }, []);\r\n\r\n    const onClick = (e: React.MouseEvent<HTMLDivElement>)=>{\r\n        const {type} = e.currentTarget.dataset;\r\n\r\n        if(type === 'quiz') history.push('/main');\r\n        else history.push('/history');\r\n        \r\n    }\r\n\r\n    return (\r\n        <div css={style}>\r\n            <div className='txt'>클릭하여 퀴즈를 풀어보세요!</div>\r\n            <IoMdArrowRoundDown size='40'></IoMdArrowRoundDown>\r\n            <div className='btn-wrapper'>\r\n                <ToolTip text='퀴즈는 5가지 카테고리중 하나가 선택됩니다.'>\r\n                    <div className='menu-btn' data-type='quiz' onClick={onClick}>퀴즈 풀기</div>\r\n                </ToolTip>\r\n                <ToolTip text='퀴즈를 풀고 저장한 결과를 볼 수 있습니다.'>\r\n                    <div className='menu-btn' data-type='hist' onClick={onClick}>기록 보기</div>\r\n                </ToolTip>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst style = css`\r\n    width: 400px;\r\n    height: 350px;\r\n    position: fixed;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    text-align: center;\r\n    color: white;\r\n    .txt {\r\n        font-size: 25px;\r\n    }\r\n    svg {\r\n        margin: 30px 0;   \r\n        animation-name: upDown;\r\n        animation-duration: 2s;\r\n        animation-timing-function: ease;\r\n        animation-iteration-count: infinite;\r\n    }\r\n    .btn-wrapper {\r\n        width: 100%;\r\n        .menu-btn {\r\n            margin-bottom: 15px;\r\n            width: 100%;\r\n            height: 55px;\r\n            line-height: 55px;\r\n            font-size: 28px;\r\n            box-sizing: content-box;\r\n            border-radius: var(--radius-2);\r\n            background-color: var(--color-orange);\r\n            color: white;\r\n            font-weight: bold;\r\n            cursor: pointer;\r\n            transition: .3s;\r\n            &:hover {\r\n                transform: translateY(-3px);\r\n                box-shadow: var(--shadow-3);\r\n            }\r\n        }\r\n    }\r\n    @keyframes upDown {\r\n        0% {transform: translateY(-13px);}\r\n        50% {transform: translateY(13px);}\r\n        100% {transform: translateY(-13px);}\r\n    }\r\n`;\r\n\r\nexport default StartPage;","import React from 'react';\r\n/** @jsxImportSource @emotion/react */\r\nimport {css} from '@emotion/react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nfunction NotFound(){\r\n    const history = useHistory();\r\n    const onClick = ()=>{\r\n        history.goBack();\r\n    }\r\n\r\n    return (\r\n        <div css={style}>\r\n            <div className='txt'>잘못된 경로에요!</div>\r\n            <div className='btn-wrapper'>\r\n                <div className='button' onClick={onClick}>이전 페이지</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst style = css`\r\n    position: fixed;\r\n    top: 40%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    font-weight: bold;\r\n    font-size: 50px;\r\n    text-align: center;\r\n    color: white;\r\n    .btn-wrapper {\r\n        width: 100%;\r\n        display: flex;\r\n        justify-content: center;\r\n        .button {\r\n            margin-top: 30px;\r\n        }\r\n    }\r\n    .txt {\r\n        min-width: 390px;\r\n    }\r\n`;\r\n\r\nexport default NotFound;","import React from 'react';\r\n/** @jsxImportSource @emotion/react */\r\nimport {css} from '@emotion/react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport {ChartBoxContainer} from '../containers/index';\r\nimport {ToolTip} from '../components/index';\r\nimport {useSelector} from 'react-redux';\r\nimport {RootState} from '../redux-modules/index';\r\n\r\nfunction ResultPage(){\r\n    const history = useHistory();\r\n    const quizState = useSelector((state: RootState)=> state.quizList);\r\n    const minSec = quizState.resultInfo.resultTime.split(':').map(t => Number(t));\r\n    const resDate = quizState.resultInfo.resultDate;\r\n\r\n    const onClickDoAgain = ()=>{\r\n        history.push('/main');\r\n    }\r\n    const onClickToStart = ()=>{\r\n        history.push('/');\r\n    }\r\n    const onClickToWrongAns = ()=>{\r\n        history.push('/note');\r\n    }\r\n\r\n    return (\r\n        <div css={style}>\r\n            <div className='wrapper'>\r\n                <div className='header'>\r\n                    <div className='txt'>📌결과<span>{resDate}</span></div>\r\n                    <div className='btn-wrapper'>\r\n                        <div className='button' onClick={onClickDoAgain}>다시풀기</div>\r\n                        <div className='button' onClick={onClickToStart}>처음으로</div>\r\n                        <ToolTip text='오답노트를 작성하고 기록을 남겨보세요.'>\r\n                            <div className='button' onClick={onClickToWrongAns}>오답노트 작성</div>\r\n                        </ToolTip>\r\n                    </div>\r\n                </div>\r\n                <div className='content'>\r\n                    <div className='result-info'>\r\n                        <div className='info'>\r\n                            <div className='desc'>소요시간</div>\r\n                            <div className='val'>{`${minSec[0]}분 ${minSec[1]}초`}</div>\r\n                        </div>\r\n                        <div className='info'>\r\n                            <div className='desc'>카테고리</div>\r\n                            <div className='val'>{quizState.quizList[0] && quizState.quizList[0].category}</div>\r\n                        </div>\r\n                        <div className='info'>\r\n                            <div className='desc'>난이도</div>\r\n                            <div className='val'>{quizState.quizList[0] && quizState.quizList[0].difficulty}</div>\r\n                        </div>\r\n                        <div className='info'>\r\n                            <div className='desc'>총 문제수</div>\r\n                            <div className='val'>{quizState.resultInfo.resultList.length}</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='chart-wrapper'>\r\n                        <ChartBoxContainer></ChartBoxContainer>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst style = css`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    min-height: 100vh;\r\n    color: white;\r\n    overflow-x: hidden;\r\n    > .wrapper {\r\n        width: 900px;\r\n        height: 600px;\r\n        > .header {\r\n            display: flex;\r\n            justify-content: space-between;\r\n            align-items: center;\r\n            transform: translateY(-5px);\r\n            font-size: 35px;\r\n            font-weight: bold;\r\n            transition: .3s;\r\n            > .txt span {\r\n                font-size: 18px;\r\n                margin-left: 20px;\r\n            }\r\n            > .btn-wrapper {\r\n                display: flex;\r\n                .button {\r\n                    margin-left: 15px;\r\n                }\r\n            }\r\n        }\r\n        > .content {\r\n            display: flex;\r\n            box-shadow: var(--shadow-2);\r\n            transition: .3s;\r\n            > .result-info {\r\n                display: flex;\r\n                flex-direction: column;\r\n                justify-content: space-between;\r\n                width: 400px;\r\n                font-size: 25px;\r\n                font-weight: bold;\r\n                padding: 40px 0 0 40px;\r\n                background-color: var(--color-dark-navy);\r\n                > .info {\r\n                    position: relative;\r\n                    margin-bottom: 50px;\r\n                    padding-left: 20px;\r\n                    border-left: 5px solid var(--color-blue);\r\n                    animation-name: showUp;\r\n                    animation-duration: 1s;\r\n                    animation-timing-function: ease;\r\n                    .desc {\r\n                        display: flex;\r\n                        align-items: center;\r\n                    }\r\n                }\r\n            }\r\n            > .chart-wrapper {\r\n                position: relative;\r\n                flex-grow: 1;\r\n                animation-name: showUp;\r\n                animation-duration: 1s;\r\n                animation-timing-function: ease;\r\n            }\r\n        }\r\n    }\r\n\r\n    @media screen and (max-width: 800px) {\r\n        align-items: unset;\r\n        .wrapper {\r\n            > .header {\r\n                flex-direction: column;\r\n                align-items: flex-start;\r\n                padding: 10px;\r\n                > .txt {\r\n                    margin-bottom: 10px;\r\n                }\r\n            }\r\n        }\r\n        .content {\r\n            flex-direction: column;\r\n            > .result-info {\r\n                width: 100% !important;\r\n                font-size: 20px !important;\r\n                > .info {\r\n                    margin-bottom: 30px !important;\r\n                }\r\n            }\r\n            > .chart-wrapper {\r\n                display: flex;\r\n                justify-content: center;\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport default ResultPage;","import React from 'react';\r\n/** @jsxImportSource @emotion/react */\r\nimport {css} from '@emotion/react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport {NoteListContainer} from '../containers/index';\r\n\r\nfunction WrongAnswerNotePage(){\r\n    const history = useHistory();\r\n    const onClickBack = ()=>{\r\n        history.goBack();\r\n    }\r\n\r\n    return (\r\n        <div css={style}>\r\n            <div className='wrapper'>\r\n                <div className='header'>\r\n                    <div className='txt'>📕오답노트</div>\r\n                    <div className='button' onClick={onClickBack}>이전으로</div>\r\n                </div>\r\n                <div className='content'>\r\n                    <NoteListContainer></NoteListContainer>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst style = css`\r\n    position: relative;\r\n    display: flex;\r\n    justify-content: center;\r\n    min-height: 100vh;\r\n    padding-top: 30px;\r\n    > .wrapper {\r\n        width: 800px;\r\n        height: calc(100vh - 50px);\r\n        color: white;\r\n        > .header {\r\n            display: flex;\r\n            justify-content: space-between;\r\n            align-items: center;\r\n            transform: translateY(-5px);\r\n            > .txt {\r\n                font-size: 30px;\r\n                font-weight: bold;\r\n            }\r\n        }\r\n        > .content {\r\n            box-shadow: var(--shadow-1);\r\n            width: 100%;\r\n            height: calc(100% - 80px);\r\n            padding: 20px;\r\n        }\r\n    }\r\n\r\n    @media screen and (max-width: 800px) {\r\n        > .wrapper {\r\n            > .header {\r\n                flex-direction: column;\r\n                align-items: flex-start;\r\n                height: 90px;\r\n                margin-bottom: 10px;\r\n                > .button {\r\n\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport default WrongAnswerNotePage;","import {historyInfo} from '../utils/interfaces';\r\n\r\nconst SET_HISTORY_LIST = 'quizHistoryList/SET_HISTORY_LIST' as const;\r\n\r\nexport const setHistoryList = (arg: historyInfo[])=> ({ \r\n    type : SET_HISTORY_LIST,\r\n    payload : arg\r\n});\r\n\r\ntype actionType = \r\n    | ReturnType<typeof setHistoryList>\r\n\r\ntype stateType = {\r\n    historyList: historyInfo[]\r\n}\r\n\r\nconst initState: stateType = {\r\n    historyList : []\r\n};\r\n\r\nfunction quizHistoryList(state: stateType = initState, action: actionType) {\r\n    switch (action.type) {\r\n        case SET_HISTORY_LIST:\r\n            return {\r\n                ...state,\r\n                historyList: action.payload.slice()\r\n            };\r\n        default:\r\n            return state;\r\n  }\r\n}\r\n\r\nexport default quizHistoryList;","import React, {useEffect, useState} from 'react';\r\n/** @jsxImportSource @emotion/react */\r\nimport {css} from '@emotion/react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport {QuizHistoryListContainer, NoteListContainer} from  '../containers/index';\r\nimport {Popup} from  '../components/index';\r\nimport {historyInfo} from  '../utils/interfaces';\r\nimport {useDispatch} from  'react-redux';\r\nimport {setHistoryList} from  '../redux-modules/quizHistoryList';\r\n\r\ninterface popInfoStateType {\r\n    show: boolean\r\n    hisInfo: historyInfo | undefined\r\n}\r\n\r\nfunction HistoryPage(){\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    const [popInfo, setPopInfo] = useState<popInfoStateType>({\r\n        show: false,\r\n        hisInfo: undefined\r\n    });\r\n\r\n\r\n    const onClickBack = ()=>{\r\n        history.goBack();\r\n    }\r\n    \r\n    const onClickQuizHistoryCard = ({resultList, resultTime, resultDate, category}: historyInfo)=>{\r\n        setPopInfo({\r\n            show: true,\r\n            hisInfo: {\r\n                resultList : resultList.slice(),\r\n                resultTime,\r\n                resultDate,\r\n                category \r\n            }\r\n        });\r\n    }\r\n\r\n    const onClosePop = ()=>{\r\n        setPopInfo({\r\n            show: false,\r\n            hisInfo: undefined\r\n        });\r\n    }\r\n\r\n    const getQuizHistoryList = ()=>{\r\n        const hisList: historyInfo[] = [];\r\n        Object.keys(sessionStorage).forEach(key => {\r\n            if(key.indexOf('quiz-') !== -1){\r\n                const str = sessionStorage.getItem(key);\r\n                hisList.push(JSON.parse(str!));\r\n            }\r\n        });\r\n        dispatch(setHistoryList(hisList));\r\n    }\r\n\r\n    useEffect(()=>{\r\n        getQuizHistoryList();\r\n    }, []);\r\n\r\n    return (\r\n        <div css={style}>\r\n            <div className='wrapper'>\r\n                <div className='header'>\r\n                    <div className='txt'>📑퀴즈이력</div>\r\n                    <div className='button' onClick={onClickBack}>이전으로</div>\r\n                </div>\r\n                <div className='content'>\r\n                    <QuizHistoryListContainer onClickCard={onClickQuizHistoryCard}></QuizHistoryListContainer>\r\n                </div>\r\n            </div>\r\n            {popInfo.show ? \r\n                <Popup width='600px' height='80%' onClose={onClosePop}>\r\n                    <NoteListContainer info={popInfo.hisInfo}></NoteListContainer>\r\n                </Popup> : null\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nconst style = css`\r\n    display: flex;\r\n    justify-content: center;\r\n    min-height: 100vh;\r\n    padding: 20px 0;\r\n    color: white;\r\n    > .wrapper {\r\n        width: 900px;\r\n        height: calc(100vh - 50px);\r\n        > .header {\r\n            display: flex;\r\n            justify-content: space-between;\r\n            margin-bottom: 5px;\r\n            .txt {\r\n                font-size: 30px;\r\n                font-weight: bold;\r\n            }\r\n        }\r\n        > .content {\r\n            display: flex;\r\n            justify-content: center;\r\n            height: calc(100% - 50px);\r\n            box-shadow: 0 10px 30px -7px black;\r\n            overflow: auto;\r\n        }\r\n    }\r\n\r\n    @media screen and (max-width: 800px){\r\n        > .wrapper {\r\n            width: unset;\r\n            height: calc(100vh - 85px);\r\n            > .header {\r\n                flex-direction: column;\r\n                height: 90px;\r\n                margin-bottom: 10px;\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport default HistoryPage;","import React, { useEffect } from 'react';\n/** @jsxImportSource @emotion/react */\nimport {css} from '@emotion/react';\nimport './Common.scss';\nimport {Route, Switch, useHistory} from 'react-router-dom';\nimport {useSelector} from 'react-redux';\nimport {RootState} from './redux-modules/index';\nimport {MainPage, StartPage, ResultPage, WrongAnswerNotePage, HistoryPage, NotFound} from './pages/index';\nimport {ConfirmMessageContainer, ToastBoxContainer} from './containers/index'; \n\nfunction App() {\n  const history = useHistory();\n  const state = useSelector((state: RootState)=> state);\n  const {confirmInfo, toastInfo} = state.app;\n  const {quizList} = state.quizList;\n\n  useEffect(()=>{\n    const root = process.env.PUBLIC_URL;\n    const pathname = window.location.pathname.replace(root, '');\n    if(pathname === '/main' || \n       pathname === '/result' || \n       pathname === '/note' || \n       pathname === '/history')\n    {\n      if(quizList.length === 0) history.push('/'); \n    }\n  });\n  \n  return (\n    <div css={style}>\n      <Switch>\n          <Route path='/' exact render={()=> <StartPage/>}></Route>\n          <Route path='/main' render={()=> <MainPage/>}></Route>\n          <Route path='/result' render={()=> <ResultPage/>}></Route>\n          <Route path='/note' render={()=> <WrongAnswerNotePage/>}></Route>\n          <Route path='/history' render={()=> <HistoryPage/>}></Route>\n          <Route component={NotFound}></Route>\n      </Switch>\n      {confirmInfo.show ? <ConfirmMessageContainer></ConfirmMessageContainer> : null}\n      {toastInfo.show ? <ToastBoxContainer></ToastBoxContainer> : null}\n    </div>\n  );\n}\n\nconst style = css`\n  background-color: #282c34;\n  min-height: 100vh;\n`;\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from 'redux';\r\nimport app from './app';\r\nimport quizList from './quizList';\r\nimport quizHistoryList from './quizHistoryList';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    app,\r\n    quizList,\r\n    quizHistoryList\r\n});\r\n\r\nexport default rootReducer;\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {createStore} from 'redux';\nimport rootReducer from './redux-modules/index';\nimport {BrowserRouter} from 'react-router-dom';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <React.StrictMode>\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Provider store={store}>\n          <App />\n        </Provider>\n      </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}